{"version":3,"sources":["components/Canvas/Canvas.jsx","components/App/App.jsx","index.js"],"names":["Canvas","props","currentResultNIT","currentResultNITNeed","currentResultPrediction","currentResultPredictionNeed","currentResultNITColor","currentResultPredictionColor","currentResultNITProc","currentResultPredictionProc","canvasRef","useRef","draw","ctx","currentResultProc","radius","width","color","startAngle","Math","PI","finishAngleCurrentResult","finishAngleNeedResult","lineWidth","strokeStyle","beginPath","arc","stroke","useEffect","canvas","current","console","log","clientHeight","context","getContext","className","ref","current_result_nit","current_result_nit_need","current_result_prediction","current_result_prediction_need","current_result_nit_color","current_result_prediction_color","height","floor","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gKAqBe,SAASA,EAAQC,GAAQ,IAEpCC,EAMED,EANFC,iBACAC,EAKEF,EALFE,qBACAC,EAIEH,EAJFG,wBACAC,EAGEJ,EAHFI,4BACAC,EAEEL,EAFFK,sBACAC,EACEN,EADFM,6BAGIC,EAA0C,IAAnBN,EAAyBC,EAChDM,EAAwD,IAA1BL,EAAgCC,EAE9DK,EAAYC,iBAAO,MAEnBC,EAAO,SAACC,EAAKC,EAAmBC,EAAQC,EAAOC,GAEnD,IAAMC,EAAaC,KAAKC,GAAK,EACvBC,EAA2BH,EAAe,EAAIC,KAAKC,GAAK,EAAM,IAAMN,EACpEQ,EAAwB,EAAIH,KAAKC,GAIvCP,EAAIU,UAAYP,EAChBH,EAAIW,YAAc,YAClBX,EAAIY,YACJZ,EAAIa,IANW,GACA,GAKSX,EAAQG,EAAYI,GAC5CT,EAAIc,SACJd,EAAIU,UAAYP,EAChBH,EAAIW,YAAcP,EAClBJ,EAAIY,YACJZ,EAAIa,IAXW,GACA,GAUSX,EAAQG,EAAYG,GAC5CR,EAAIc,UAyBN,OAjBAC,qBAAU,WACR,IAAMC,EAASnB,EAAUoB,QAEzBC,QAAQC,IAAItB,EAAUoB,QAAQG,cAC9B,IAAMC,EAAUL,EAAOM,WAAW,MAElCvB,EAAKsB,EAAS1B,EAAsB,GAAI,GAAIF,GAC5CM,EAAKsB,EAASzB,EAA6B,GAAI,EAAGF,MAWlD,gCACE,qBAAK6B,UAAU,eAAf,SACE,wBACEC,IAAK3B,EACL4B,mBAAoBpC,EACpBqC,wBAAyBpC,EACzBqC,0BAA2BpC,EAC3BqC,+BAAgCpC,EAChCqC,yBAA0BpC,EAC1BqC,gCAAiCpC,EACjCqC,OAAQ,IACR5B,MAAO,QAGX,0BAASoB,UAAU,MAAnB,UACE,sBAAMA,UAAU,yBAAhB,SAA0CjB,KAAK0B,MAAMrC,KACrD,sBAAM4B,UAAU,2BAAhB,kBAEF,0BAASA,UAAU,aAAnB,UACE,sBAAMA,UAAU,gCAAhB,SAAiDjB,KAAK0B,MAAMpC,KAC5D,sBAAM2B,UAAU,iCAAhB,kBAEF,0BAASA,UAAU,cAAnB,UACE,0BAASA,UAAU,kBAAnB,UACE,sBAAMA,UAAU,WAAhB,gCACA,0BAASA,UAAU,GAAnB,UACE,sBAAMA,UAAU,aAAhB,SAA8BlC,IAC9B,sBAAMkC,UAAU,8BAAhB,iBACA,sBAAMA,UAAU,8BAAhB,SAA+CjC,UAGnD,0BAASiC,UAAU,yBAAnB,UACE,sBAAMA,UAAU,kBAAhB,wDACA,0BAASA,UAAU,GAAnB,UACE,sBAAMA,UAAU,oBAAhB,SAAqChC,IACrC,sBAAMgC,UAAU,4CAAhB,iBACA,sBAAMA,UAAU,4CAAhB,SAA6D/B,gBAvGzEL,EAAO8C,aAAe,CACpBxC,sBAAuB,QACvBJ,iBAAkB,EAClBC,qBAAsB,EACtBI,6BAA8B,QAC9BH,wBAAyB,EACzBC,4BAA6B,GCFhB0C,MAbf,WACE,OACE,cAAC/C,EAAD,CACEE,iBAAkB,OAClBC,qBAAsB,OACtBC,wBAAyB,OACzBC,4BAA6B,OAC7BC,sBAAsB,SACtBC,6BAA6B,UCNnCyC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.5e5f9aee.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport * as TYPES from 'prop-types';\n\nCanvas.propTypes = {\n  currentResultNITColor: TYPES.string,\n  currentResultNIT: TYPES.number,\n  currentResultNITNeed: TYPES.number,\n  currentResultPredictionColor: TYPES.string,\n  currentResultPrediction: TYPES.number,\n  currentResultPredictionNeed: TYPES.number,\n};\n\nCanvas.defaultProps = {\n  currentResultNITColor: 'black',\n  currentResultNIT: 0,\n  currentResultNITNeed: 0,\n  currentResultPredictionColor: 'black',\n  currentResultPrediction: 0,\n  currentResultPredictionNeed: 0,\n};\n\nexport default function Canvas (props) {\n  const {\n    currentResultNIT,\n    currentResultNITNeed,\n    currentResultPrediction,\n    currentResultPredictionNeed,\n    currentResultNITColor,\n    currentResultPredictionColor,\n  } = props;\n\n  const currentResultNITProc = currentResultNIT * 100 / currentResultNITNeed;\n  const currentResultPredictionProc = currentResultPrediction * 100 / currentResultPredictionNeed;\n\n  const canvasRef = useRef(null)\n\n  const draw = (ctx, currentResultProc, radius, width, color) => {\n\n    const startAngle = Math.PI / 2;\n    const finishAngleCurrentResult = startAngle + ( 3 * Math.PI / 2 ) / 100 * currentResultProc;\n    const finishAngleNeedResult = 2 * Math.PI;\n    const xCentr = 75;\n    const yCentr = 75;\n\n    ctx.lineWidth = width;\n    ctx.strokeStyle = 'lightgrey';\n    ctx.beginPath()\n    ctx.arc(xCentr, yCentr, radius, startAngle, finishAngleNeedResult)\n    ctx.stroke();\n    ctx.lineWidth = width;\n    ctx.strokeStyle = color;\n    ctx.beginPath()\n    ctx.arc(xCentr, yCentr, radius, startAngle, finishAngleCurrentResult)\n    ctx.stroke();\n  }\n\n  // const write = (ctx,text, x, y, fontWeight) => {\n  //   ctx.font = fontWeight + 'px Roboto';\n  //   ctx.fillText(text, x, y + 7.5);\n  // }\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n\n    console.log(canvasRef.current.clientHeight);\n    const context = canvas.getContext('2d')\n\n    draw(context, currentResultNITProc, 50, 20, currentResultNITColor)\n    draw(context, currentResultPredictionProc, 70, 4, currentResultPredictionColor)\n    // write(context, Math.floor(currentResultNITProc) + '%', 85, 75, 20)\n    // write(context, Math.floor(currentResultPredictionProc) + '%', 160, 65, 10)\n\n    // write(context, 'НИТ', 110, 90, 10)\n    // write(context, currentResultNIT + ' / ' + currentResultNITNeed, 110, 105, 15)\n    // write(context, 'ПРОГНОЗ', 110, 120, 10)\n    // write(context, currentResultPrediction + ' / ' + currentResultPredictionNeed, 110, 140, 15)\n  })\n\n  return (\n    <div>\n      <div className='roundPicture'>\n        <canvas\n          ref={canvasRef}\n          current_result_nit={currentResultNIT}\n          current_result_nit_need={currentResultNITNeed}\n          current_result_prediction={currentResultPrediction}\n          current_result_prediction_need={currentResultPredictionNeed}\n          current_result_nit_color={currentResultNITColor}\n          current_result_prediction_color={currentResultPredictionColor}\n          height={150}\n          width={150}\n        />\n      </div>\n      <section className='NIT'>\n        <span className='NIT-quant percent-text'>{Math.floor(currentResultNITProc)}</span>\n        <span className='NIT-percent percent-text'>%</span>\n      </section>\n      <section className='prediction'>\n        <span className='prediction-quant percent-text'>{Math.floor(currentResultPredictionProc)}</span>\n        <span className='prediction-percent percent-ext'>%</span>\n      </section>\n      <article className='description'>\n        <section className='description-NIT'>\n          <span className='NIT-text'>НИТ</span>\n          <section className=''>\n            <span className='NIT-number'>{currentResultNIT}</span>\n            <span className='NIT-number NIT-number--need'> / </span>\n            <span className='NIT-number NIT-number--need'>{currentResultNITNeed}</span>\n        </section>\n        </section>\n        <section className='description-prediction'>\n          <span className='prediction-text'>ПРОГНОЗ</span>\n          <section className=''>\n            <span className='prediction-number'>{currentResultPrediction}</span>\n            <span className='prediction-number prediction-number--need'> / </span>\n            <span className='prediction-number prediction-number--need'>{currentResultPredictionNeed}</span>\n          </section>\n        </section>\n      </article>\n    </div>\n  )\n}","import React from 'react';\nimport Canvas from '../Canvas/Canvas';\n\nfunction App() {\n  return (\n    <Canvas\n      currentResultNIT={234840}\n      currentResultNITNeed={246051}\n      currentResultPrediction={272289}\n      currentResultPredictionNeed={283500}\n      currentResultNITColor='orange'\n      currentResultPredictionColor='grey'\n    />\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}